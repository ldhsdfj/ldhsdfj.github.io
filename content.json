{"meta":{"title":"奎","subtitle":"有一言而可以终身行之者乎","description":"","author":"lk","url":"http://example.com","root":"/"},"pages":[{"title":"标签","date":"2022-05-25T14:12:24.000Z","updated":"2022-05-30T01:14:13.616Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":"vueHEXO"},{"title":"分类","date":"2022-05-25T14:12:10.000Z","updated":"2022-05-28T11:17:54.993Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-05-28T03:40:04.000Z","updated":"2022-06-04T14:18:24.325Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-05-28T03:39:35.000Z","updated":"2022-05-28T03:40:53.689Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"timeline","date":"2022-05-28T03:39:49.000Z","updated":"2022-05-28T03:42:39.676Z","comments":true,"path":"timeline/index.html","permalink":"http://example.com/timeline/index.html","excerpt":"","text":""},{"title":"music","date":"2022-05-28T11:11:26.000Z","updated":"2022-05-28T11:13:16.796Z","comments":true,"path":"list/index.html","permalink":"http://example.com/list/index.html","excerpt":"","text":"杜拉拉"},{"title":"music","date":"2022-05-28T11:15:03.000Z","updated":"2022-06-18T13:07:26.406Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"音乐1 纯音乐"},{"title":"movies","date":"2022-05-28T11:16:31.000Z","updated":"2022-06-18T12:45:27.881Z","comments":true,"path":"movies/index.html","permalink":"http://example.com/movies/index.html","excerpt":"","text":"爱你"},{"title":"artitalk","date":"2022-06-12T10:35:03.926Z","updated":"2022-06-12T10:35:03.926Z","comments":false,"path":"artitalk/index.html","permalink":"http://example.com/artitalk/index.html","excerpt":"","text":""},{"title":"bangumis","date":"2020-12-14T06:43:39.000Z","updated":"2022-06-04T14:26:17.773Z","comments":true,"path":"bangumis/index.html","permalink":"http://example.com/bangumis/index.html","excerpt":"","text":""}],"posts":[{"title":"wacth和computed的区别","slug":"watch和计算属性的区别","date":"2022-06-18T12:29:18.358Z","updated":"2022-06-18T12:47:10.760Z","comments":true,"path":"2022/06/18/watch和计算属性的区别/","link":"","permalink":"http://example.com/2022/06/18/watch%E5%92%8C%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"wacthwacth (不会对数据进行缓存)可以执行异步computed能实现的wacth都能实现 有 getter setter 方法可以监视数据的变化相关属性 ： deep 深度监视 可以检测到对象里面每一项的改变immediate 初始化监视12345678910//wacth 的完整写法wacth&#123;&#x27;number.a&#x27;:&#123; deep:true, immediate:true,//初始化监视属性 handler(nweValue,oldValue)&#123; console.log(&#x27;ishot改变了&#x27;+nweValue,oldValue); &#125; &#125;&#125; computed对数据进行缓存 减少性能消耗","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"axios","slug":"axios的简单使用和封装","date":"2022-06-12T00:46:42.197Z","updated":"2022-06-18T12:47:22.589Z","comments":true,"path":"2022/06/12/axios的简单使用和封装/","link":"","permalink":"http://example.com/2022/06/12/axios%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E5%92%8C%E5%B0%81%E8%A3%85/","excerpt":"","text":"下载 npm i axios封装 axios新建一个network文件夹 里面建一个index.js1234567891011121314151617181920212223242526272829303132import axios from &quot;axios&quot;;export default function ajax(options)&#123; return new Promise((resolve,resject)=&gt;&#123; const axiosIn=axios.create(&#123; baseURL:&quot;http://***.***.**.***&quot;, timeout:2000 &#125;); axiosIn.interceptors.request.use(config=&gt;&#123; console.log(&#x27;请求前的拦截&#x27;); console.log(config); config.params.age=12 return config //返回出数据 &#125;) axiosIn.interceptors.response.use(config=&gt;&#123; console.log(&#x27;请求后的拦截&#x27;); console.log(config); // if(config.data.code===200) console.log(&quot;鞑靼&quot;); return config.data//返回出拦截后的数据 &#125;) axiosIn(options).then(res=&gt;&#123; resolve(res) &#125;).catch((err)=&gt;&#123; resject(err) &#125;) &#125;)&#125; 使用方法 在需要的组件引入这个文件 或则在 main.js全局引入import network from ‘.&#x2F;地址’ 12345network(&#123; url:&#x27;接口地址&#x27;， methed:&#x27;请求方式 例如post&#x27;, data:&#123;&#125;//需要返回的数据 get是params&#125;).then(res=&gt;&#123;&#125;).catch(err=&gt;&#123;&#125;)","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"Vuex","slug":"vuex","date":"2022-06-12T00:24:54.598Z","updated":"2022-06-18T13:07:26.406Z","comments":true,"path":"2022/06/12/vuex/","link":"","permalink":"http://example.com/2022/06/12/vuex/","excerpt":"","text":"安装 vuexnpm i vuex@ 自行选择对应的版本推荐新建一个文件夹store 引入vuex 并使用 123import Vue from &#x27;vue&#x27;import Vuex from &#x27;vuex&#x27;Vue.use(Vuex); 2. 五大核心和 对应的简单用法1模块12345678910111213141516171819const modules=&#123; moduleA:&#123; actions:&#123;&#125;, mutations:&#123;&#125;, state:&#123; name:&#x27;a&#x27; &#125;, getters:&#123;&#125; &#125;, moduleB:&#123; actions:&#123;&#125;, mutations:&#123;&#125;, state:&#123; name:&#x27;b&#x27; &#125;, getters:&#123;&#125;, &#125;&#125; 2 action 响应动作处理逻辑 可执行异步 （dispatch）1234567891011121314151617181920212223const actions = &#123; jia(context, value) &#123;//加法 console.log(&#x27;加被调用了&#x27;, context, value); context.commit(&quot;Jia&quot;, value); &#125;, jian(context, value) &#123;//减法 console.log(&#x27;加被调用了&#x27;, context, value); context.commit(&quot;Jian&quot;, value); &#125;, jianOdd(context, value) &#123;//奇数加 if (state.sum % 2 !== 0) &#123; console.log(&#x27;加被调用了&#x27;, context, value); context.commit(&quot;Jia&quot;, value); &#125; &#125;, time(context,value) &#123; setTimeout(() =&gt; &#123;//延时加法 context.commit(&quot;Jia&quot;,value); &#125;, 2000); &#125;,&#125;; 3.mutation 指定更改state数据 只响应同步 (commit)12345678910const mutations = &#123; Jia(state, value) &#123; console.log(&quot;Jia加被调用了&quot;, state, value); state.sum += value &#125;, Jian(state, value) &#123; console.log(&quot;Jian加被调用了&quot;, state, value); state.sum -= value &#125;&#125;; 4.getters 处理数据 返回数据 相当于计算属性12345678910const getters = &#123; getlist()&#123; return function(val)&#123;//过滤数组 return state.list.filter(item=&gt;item.age&gt;val); &#125; &#125;, getmodelA()&#123;//拿到模块的值 return state.moduleA.name &#125;&#125;; 5.state 存储数据123456789101112131415161718192021222324252627282930313233const state = &#123; list: [&#123; id: 1, age: 30, name: &quot;kk1&quot; &#125;, &#123; id: 2, age: 25, name: &quot;kk2&quot; &#125;, &#123; id: 3, age: 24, name: &quot;kk3&quot; &#125;, &#123; id: 4, age: 20, name: &quot;kk4&quot; &#125; ], sum: 0,&#125;;export default new Vuex.Store(&#123; actions, mutations, state, getters, modules&#125;)","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"vue-router","slug":"vue路由","date":"2022-06-02T04:27:16.421Z","updated":"2022-06-12T00:32:45.148Z","comments":true,"path":"2022/06/02/vue路由/","link":"","permalink":"http://example.com/2022/06/02/vue%E8%B7%AF%E7%94%B1/","excerpt":"","text":"vue 路由安装插件 npm i vue-router@安装对应的 router, vue2 对应 vue-router3 , vue3 对应 vue-router4详情参考 新建路由文件 router1. 在 router 里引入 vue 和路由插件 自己的组件 例如1234import Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27; 2. 实例化 router Vue.use(VueRouter) 123456789101112131415161718192021222324252627let router=new VueRouter(&#123; routes:[ &#123; path:&#x27;/&#x27; //默认跳转路由 redirect:()=&gt;import&#123;组件的相对位置&#125; &#125;, &#123; path: &#x27;/地址&#x27;， name: &#x27;/同上&#x27;， component:()=&gt;import&#123;组件的相对位置&#125; &#125;, &#123; path: &#x27;/地址&#x27;， name:&#x27;/同上&#x27;， component:()=&gt;import&#123;组件的相对位置&#125;， //子路由的注册 children：[ &#123; path: &#x27;地址&#x27;，//不需要反斜杠了 name:&#x27;同上&#x27;， component:()=&gt;import&#123;组件的相对位置&#125;， &#125; ] &#125; ]&#125;) 3main.js 里面引用 导出的路由 并在示例里面使用1234567import router from &#x27;./router/index&#x27;new Vue(&#123; render: h =&gt; h(App), router,//使用定义的路由&#125;).$mount(&#x27;#app&#x27;) 使用方法 跳转到指定的位置 this.$router.push(‘&#x2F;地址’); 跟多的方法属性都可以通过 router 找到","categories":[],"tags":[]},{"title":"Vue事件总线","slug":"vue事件总线","date":"2022-05-26T04:44:15.208Z","updated":"2022-06-05T01:25:06.886Z","comments":true,"path":"2022/05/26/vue事件总线/","link":"","permalink":"http://example.com/2022/05/26/vue%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/","excerpt":"","text":"Vue 组件间通信的方法 props $emit 事件总线一.自定义事件12$on 绑定自定义事件 （&#x27;事件名字&#x27;，回调函数写在里面用箭头函数的形式） 1234 $off 解绑自定义事件 在vue销毁的时候所有的自定义事件失效(不传参数默认全部清除)(参数)(多个参数使用数组[参数(要清除的事件)]) 12$emit 触发事件的方法参数 (&#x27;绑定方法的名字&#x27;,需要传递的参数 可以是任意数据类型 或则函数) 二. 定义事件的总线（GlobalEventBus） 全局事件总线1，一种任意组件之间的通信方式2.安装全局总线12345678new Vue(&#123; ------- beforeCreate()&#123; Vue.prototype.$bus=this &#125; -----&#125;) 三. 使用事件总线 A组件接收数据，则在A组件中给$bus绑定自定义事件，事件回调留在A组件身上 12345678methods()&#123; demo(data)&#123; ------ &#125;&#125;mounted()&#123; this.$bus.$on(&#x27;xxx&#x27;,this.demo);&#125; 提供数据：this.$bus.$emit(‘xxx’,data) 4.最好在beforeDestroy钩子中 用$off() 解绑当前用到的事件消息订阅与发布1 安装对应的库 例如 pubsub-js1npm i pubsub 在需要数据的地方订阅消息123456789101112mounted() &#123;挂载完成时订阅消息 //没有this指向推荐写成箭头函数的形式 this.pubIn= pubsub.subscribe(&#x27;hello&#x27;,(msgName,data)=&gt;&#123; console.log(&#x27;有人发布了hello消息,hello回调执行了&#x27;,msgName,data); &#125;) &#125;, //销毁 beforeDestroy() &#123; 销毁之前取消订阅 // this.$bus.$off(&quot;kda&quot;); pubsub.unsubscribe(this.pubIn) &#125;, 在有提供数据的地方发布消息12345methods: &#123; send()&#123; pubsub.publish(&#x27;hello&#x27;,666) &#125;&#125;,","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"Hexo 搭建bolg的方法","slug":"hexo 搭建bolg的方法","date":"2022-05-25T14:55:19.826Z","updated":"2022-06-04T13:32:06.948Z","comments":true,"path":"2022/05/25/hexo 搭建bolg的方法/","link":"","permalink":"http://example.com/2022/05/25/hexo%20%E6%90%AD%E5%BB%BAbolg%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"HEXO 搭建blog1安装hexo(首先需要拥有node.js)1npm install hexo-cli -g 1.1 新建一个文件夹打开Git Bash Here 输入以下命令初始化文件1234# 查看版本hexo -v# 初始化hexo init 1.2 开启本地服务1hexo s 此时Gits Bash Here 上会出现一个本地链接点击即可进入blog首页 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 2 Gitee &#x2F;Gehub 上部署Blog2.1 本地找到blog文件的config._yml文件 打开修改参数123type: &quot;git&quot; **类型**repo: &quot;getee/github&quot; **地址**branch: &quot;master&quot; **分支** 2.212#生成静态文件 部署到git hexo g","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"markdown 语法","slug":"markdown 语法","date":"2022-05-25T06:15:18.321Z","updated":"2022-05-28T15:09:19.093Z","comments":true,"path":"2022/05/25/markdown 语法/","link":"","permalink":"http://example.com/2022/05/25/markdown%20%E8%AF%AD%E6%B3%95/","excerpt":"","text":"详情参考官方文档:https://markdown.com.cn/basic-syntax/line-breaks.html","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"butterfly(蝴蝶主题) 配置文件","slug":"butterfly(蝴蝶) 配置文件","date":"2022-05-25T04:17:09.902Z","updated":"2022-05-28T15:09:16.151Z","comments":true,"path":"2022/05/25/butterfly(蝴蝶) 配置文件/","link":"","permalink":"http://example.com/2022/05/25/butterfly(%E8%9D%B4%E8%9D%B6)%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"_config.yml文件的配置项 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签 （不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 keywords 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用） 升级建议为了減少升级主题带来的不便，我们还需要做以下操作：采用如下两种方式中的任意一种都行方式一：把主题文件夹中的 _config.yml 复制到 Hexo 根目录下，同时重命名为 _config.butterfly.yml。 将 blog themes Butterfly config.yml复制到 blog _config.butterfly.yml (将_config.yml重命名) 方式二：推荐把主题默认的配置文件_config.yml 复制到 Hexo 根目录下的source/_data/目录下，然后将文件名改为butterfly.yml（如果 source/_data/ 的目录不存在则创建一个）。 将 blog themes Butterfly config.yml复制到 blog source _data butterfly.yml (将_config.yml重命名) 主题页面配置Front-matterFront-matter 是每个markdown文件最上方以 — 分隔的区域，用于指定文章的参数。 如果可选的参数，可根据自己的需要添加，不用全部都写在 markdown里， 是在每一个markdown文件里配置 Page Front-matter介绍有的人认为 hexo 自带的主题landscape非常难看，那么我们有没有好看的主题可选呢？ 查看回答？ 当然是有的，有不少的人给我们提供了十分多的主题，查看主题库：https://hexo.io/themes/ hexo-theme-butterfly 是基于 Molunerfinn 的 hexo-theme-melody 的基础上进行开发的。接下来推荐几款觉得好看的主题库？ Butterfly：这款主题非常好看，好用，功能十分齐全，当然本站也是用的该主题安装 应用主题修改站点配置文件_config.yml，把主题改为 butterfly theme: butterfly 安装插件安装插件如果沒有 pug 以及 stylus 的渲染器，还需要下载，否则在项目运行时会报错： npm install hexo-renderer-pug hexo-renderer-stylus –save 升级建议3为了減少升级主题带来的不便，我们还需要做以下操作：采用如下两种方式中的任意一种都行方式一：把主题文件夹中的 _config.yml 复制到 Hexo 根目录下，同时重命名为 _config.butterfly.yml。 将 blog themes Butterfly config.yml复制到 blog _config.butterfly.yml (将_config.yml重命名) 方式二：推荐把主题默认的配置文件_config.yml 复制到 Hexo 根目录下的source/_data/目录下，然后将文件名改为butterfly.yml（如果 source/_data/ 的目录不存在则创建一个）。 将blog .themes . Butterfly .config.yml 复制到blog - source - _data- butterfly.yml (将_config.yml重命名) 主题页面配置Front-matterFront-matter 是每个markdown文件最上方以 — 分隔的区域，用于指定文章的参数。 如果可选的参数，可根据自己的需要添加，不用全部都写在 markdown里， 是在每一个markdown文件里配置 配置 信息 其他 title 【必填】页面标题 date 【必填】页面创建日期 type 【必填】标签、分类和友情链接三个页面必须填写 updated 【可选】页面更新日期 comments 【可选】页面评论模块(默认为true) description 【可选】页面描述 keywords 【可选】页面关键字 top_img 【可选】页面顶部图片 mathjax 【可选】展示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false) katex 【可选】展示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false) aside 【可选】展示侧边栏 (默认 true) aplayer 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐配置 highlight_shrink 【可选】配置代码框是否展开 (true/false)(默认设置为 highlight_shrink 的配置) 可选配置 配置 信息 title: 【必需】文章标题 date: 【必需】文章创建日期 updated: 【可选】文章更新日期 tags: 【可选】文章标签 categories: 【可选】文章分类 keywords: 【可选】文章关键字 description: 【可选】文章描述 top_img: 【可选】文章顶部图片 comments： 【可选】显示文章评论模块 (默认 true) cover: 【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图片地址 / 留空) toc: 【可选】 显示文章 TOC (默认为设置中 toc 的 enable 配置) toc_number: 【可选】显示 toc_number (默认为设置中 toc 的 number 配置) auto_open: 【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置) copyright: 【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置) copyright_author: 【可选】文章版权模块的文章作者 copyright_author_href: 【可选】文章版权模块的文章作者链接 copyright_url: 【可选】文章版权模块的文章连结链接 copyright_info: 【可选】文章版权模块的版权声明文字 mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false) katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false) aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置 highlight_shrink： 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]}